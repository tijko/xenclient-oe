#!/bin/sh
#
# Copyright (c) 2012 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

TYPE=`echo ${XENBUS_PATH} | cut -f 2 -d '/'`
DOMID=`echo ${XENBUS_PATH} | cut -f 3 -d '/'`
DEVID=`echo ${XENBUS_PATH} | cut -f 4 -d '/'`
NMPIDFILE="/var/run/NetworkManager.pid"
WIRED="/wired/0/bridged"
WIRELESS="/wifi/0/shared"
SHARED="/wired/0/shared"
INTERNAL="/internal/0"
ANY=""

XAPI=/xapi/${DOMID}/hotplug/${TYPE}/${DEVID}

#DEBUG: echo $@ >> /tmp/vif
#DEBUG: echo $vif >> /tmp/vif
if [ ! -z ${vif} ]; then
    MAJOR=`echo ${vif} | cut -f 1 -d '.' | awk -F 'vif' '{print $NF}'`
    MINOR=`echo ${vif} | cut -f 2 -d '.'`
    BRIDGE=`xenstore-read backend/vif/${MAJOR}/${MINOR}/bridge`
    case $BRIDGE in
        $WIRED)
               BRIDGE="brbridged"
               ;;
        $WIRELESS)
               BRIDGE="brwireless"
               ;;
        $SHARED)
               BRIDGE="brshared"
               ;;
        $INTERNAL)
               BRIDGE="brinternal"
               ;;
        $ANY)
               BRIDGE="brany"
               ;;
    esac

    #DEBUG: echo $@ $MAJOR $MINOR $BRIDGE >> /tmp/vif
fi

function restart_nm {
    #stop nm
    NMPID=`cat $NMPIDFILE`
    if [ ! -z $NMPID ]; then
        kill $NMPID
    fi
    sleep 1s
    #start nm
    `NetworkManager`
}

function add_bridge {
    #DEBUG: echo adding bridge  $1 >> /tmp/vif
    ovs-vsctl add-br ${1}
    ifconfig ${1} up
    if [ "x$1" = "xbrbridged" ]; then
        #DEBUG: echo adding eth0 to bridge >> /tmp/vif
        ovs-vsctl add-port brbridged eth0
        ifconfig eth0 inet 0.0.0.0 promisc up
        iptables -N FORWARD_brbridged
        iptables -F FORWARD_brbridged
        iptables -I FORWARD_brbridged -o brbridged -m physdev --physdev-is-bridged --physdev-out eth0 -j ACCEPT
        restart_nm
    elif [ "x$1" = "xbrwireless" ];then
        ovs-vsctl add-port brwireless wlan0
        ifconfig wlan0 promisc up
        restart_nm
    fi
}

function add_vif_bridge {
    #DEBUG: echo inside function  $BRIDGE >> /tmp/vif
    OVS_PATH=`ovs-vsctl show | grep version | cut -f 1 -d ':'`
    while [ -z $OVS_PATH ]; do
        sleep 1
        OVS_PATH=`ovs-vsctl show | grep version | cut -f 1 -d ':'`
        echo ovs path is $OVS_PATH >> /tmp/vif
    done

    #add bridge
    BREXISTS=`ovs-vsctl show | sed -n '/\bBridge '$BRIDGE'\b/p'`
    if [ -z $BREXISTS ]; then
        add_bridge "$BRIDGE"
    fi

    #DEBUG: echo BREXISTS = $BREXISTS >> /tmp/vif
    if [ "x$BRIDGE" = "xbrshared" ] && [ -z $BREXISTS ]; then
        #DEBUG: echo setting hwaddr >> /tmp/vif
        ovs-vsctl set bridge $BRIDGE other-config:hwaddr=\"fe:ff:ff:ff:ff:ff\"

        #check and add brbridged
        BREXISTS=`ovs-vsctl show | sed -n '/\bBridge brbridged\b/p'`
        if [ -z $BREXISTS ]; then
             add_bridge brbridged
        fi

        #get an ip for brbridged
        #DEBUG: echo getting ip for brbridged >> /tmp/vif
        dhclient brbridged

        # set ip and netmask for brshared
        #DEBUG: echo settting ip for brshared >> /tmp/vif
        ifconfig $BRIDGE inet 172.16.1.1 netmask 255.255.255.0 promisc up

        #add iptables rule for packet forwarding between brshared and brbridged
        #DEBUG: echo setting iptable rule >> /tmp/vif
        iptables -I FORWARD -i brbridged -o brbridged -m physdev --physdev-in eth0 -j FORWARD_brbridged
        iptables -A FORWARD -i $BRIDGE -o brbridged -j ACCEPT
        iptables -A FORWARD -i brbridged -o $BRIDGE -j ACCEPT
        iptables -A FORWARD -i $BRIDGE -o $BRIDGE -j ACCEPT
        iptables -A FORWARD -o $BRIDGE -j REJECT
        iptables -A FORWARD -i $BRIDGE -j REJECT

        #add NAT functionality
        #DEBUG: echo setting masquerade >> /tmp/vif
        iptables -t nat -A POSTROUTING -o brbridged+ -j MASQUERADE

        #run dnsmasq on brshared
        #DEBUG: echo running dnsmasq >> /tmp/vif
        dnsmasq -C /etc/dnsmasq-config/dnsmasq.brshared
    elif [ "x$BRIDGE" = "xbrwireless" ] && [ -z $BREXISTS ]; then
        #DEBUG: echo setting hwaddr >> /tmp/vif
        ovs-vsctl set bridge $BRIDGE other-config:hwaddr=\"fe:ff:ff:ff:ff:ff\"

        # set ip and netmask for brwireless
        #DEBUG: echo settting ip for brwireless >> /tmp/vif
        ifconfig $BRIDGE inet 172.16.2.1 netmask 255.255.255.0 promisc up

        #add iptables rule for packet forwarding between brwireless and wlan0
        #DEBUG: echo setting iptable rule >> /tmp/vif
        iptables -A FORWARD -i $BRIDGE -o wlan0 -j ACCEPT
        iptables -A FORWARD -i wlan0 -o $BRIDGE -j ACCEPT
        iptables -A FORWARD -i $BRIDGE -o $BRIDGE -j ACCEPT
        iptables -A FORWARD -o $BRIDGE -j REJECT
        iptables -A FORWARD -i $BRIDGE -j REJECT

        #add NAT functionality
        #DEBUG: echo setting masquerade >> /tmp/vif
        iptables -t nat -A POSTROUTING -o wlan+ -j MASQUERADE

        #run dnsmasq on brwireless
        #DEBUG: echo running dnsmasq >> /tmp/vif
        dnsmasq -C /etc/dnsmasq-config/dnsmasq.$BRIDGE
    elif [ "x$BRIDGE" = "xbrany" ] && [ -z $BREXISTS ]; then
        #DEBUG: echo setting hwaddr >> /tmp/vif
        ovs-vsctl set bridge $BRIDGE other-config:hwaddr=\"fe:ff:ff:ff:ff:ff\"

        # set ip and netmask for brany
        #DEBUG: echo settting ip for brany >> /tmp/vif
        ifconfig $BRIDGE inet 172.16.3.1 netmask 255.255.255.0 promisc up

        #run dnsmasq on brany
        #DEBUG: echo running dnsmasq >> /tmp/vif
        dnsmasq -C /etc/dnsmasq-config/dnsmasq.$BRIDGE
    elif [ "x$BRIDGE" = "xbrinternal" ]; then
        ovs-vsctl set bridge $BRIDGE other-config:hwaddr=\"fe:ff:ff:ff:ff:ff\"
    fi

    #add vif
    #DEBUG: echo adding vif to bridge >> /tmp/vif
    ovs-vsctl add-port ${BRIDGE} ${vif}
    ifconfig ${vif} inet 0.0.0.0 promisc up

}

case "$1" in
    add)
        #Handle the case after reboot
        if [ ! -z ${vif} ]; then
            #DEBUG: echo calling function  from add >> /tmp/vif
            add_vif_bridge
        fi
        ;;

    online)
        #DEBUG: echo calling function  from online >> /tmp/vif
        add_vif_bridge
        if [ "x${vif}" = "x" ]; then
            exit
        fi
        xenstore-write "${XAPI}/vif" "${vif}"
        xenstore-write "${XAPI}/hotplug" "online"
        UUID=
        for i in `xenstore-list /xenmgr/vms`; do
            if [ "x`xenstore-read /xenmgr/vms/$i/domid`" = "x${DOMID}" ]; then
                UUID=$i
                break;
            fi
        done
        FW_CONFIG=
        if [ ! -z $UUID ]; then
            FW_CONFIG="/vm/${UUID}/config/nic/${DEVID}/firewall-rules"
        fi

        iptables -N INPUT_${vif}
        iptables -N FORWARD_${vif}
        iptables -A INPUT_vifs -m physdev --physdev-in ${vif} -j INPUT_${vif}
        iptables -A FORWARD_vifs -m physdev --physdev-in ${vif} -j FORWARD_${vif}

        treat_rule()
        {
            OCMD=`db-read-dom0 $1/cmd`
            OTYPE=`db-read-dom0 $1/type`
            RTYPE=INPUT_${vif}
            RCMD=`echo $OCMD | tr '[:lower:]' '[:upper:]'`
            PORT=`db-read-dom0 $1/port`
            IP=`db-read-dom0 $1/ip`
            PROTOCOL=`db-read-dom0 $1/protocol`
            EXTRA=''

            if [ ! -z $PROTOCOL ]; then
                PROTOCOL=`echo $PROTOCOL | tr '[:lower:]' '[:upper:]'`
                EXTRA="--protocol $PROTOCOL"
            fi

            case `echo $OTYPE | tr '[:upper:]' '[:lower:]'` in
                input)
                    RTYPE=INPUT_${vif}
                    if [ ! -z $PORT ]; then
                        EXTRA="$EXTRA --source-port $PORT"
                    fi
                    if [ ! -z $IP ]; then
                        EXTRA="$EXTRA --source $IP"
                    fi
                    ;;
                output)
                    RTYPE=FORWARD_${vif}
                    if [ ! -z $PORT ]; then
                        EXTRA="$EXTRA --destination-port $PORT"
                    fi
                    if [ ! -z $IP ]; then
                        EXTRA="$EXTRA --destination $IP"
                    fi
                    ;;
            esac

            iptables -A $RTYPE $EXTRA -j $RCMD
        }

        if [ ! -z $FW_CONFIG ]; then
            for i in `db-nodes-dom0 $FW_CONFIG`; do
                treat_rule $FW_CONFIG/$i
            done
        fi
        #end firewall
        ;;

    offline)
        #remove vif
        #DEBUG: echo removing vif from bridge >> /tmp/vif
	BRIDGE=`ovs-vsctl port-to-br ${vif}`
        ovs-vsctl del-port ${BRIDGE} ${vif}

        xenstore-rm "${XAPI}/hotplug"

        iptables -D INPUT_vifs -m physdev --physdev-in ${vif} -j INPUT_${vif}
        iptables -D FORWARD_vifs -m physdev --physdev-in ${vif} -j FORWARD_${vif}
        iptables -F INPUT_${vif}
        iptables -F FORWARD_${vif}
        iptables -X INPUT_${vif}
        iptables -X FORWARD_${vif}
        ;;
esac
